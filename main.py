import json
import jsonpickle
import time

from os.path import realpath, dirname
from pathlib import Path
from recipes.logic import *
from recipes.v0_17 import *


PROJECT_DIR = realpath(dirname(__file__))


# TODO: Have Machine/Module/Recipe classes extend JSONEncoder/JSONDecoder.  This should provide better performance and
# less ugly JSON structure than the current files generated by jsonpickle.  Can remove this write_json_files method
# along with the v0_17.py module once completed.
def write_json_files(version):
    machines = init_machines()
    modules = init_modules()
    recipes = init_recipes()
    indent_level = 4
    with open(Path("{}/resource/{}/machines.json".format(PROJECT_DIR, version)), mode="w+") as machines_file:
        machines_file.write(json.dumps(json.loads(jsonpickle.encode(machines)), indent=indent_level))
    with open(Path("{}/resource/{}/modules.json".format(PROJECT_DIR, version)), mode="w+") as modules_file:
        modules_file.write(json.dumps(json.loads(jsonpickle.encode(modules)), indent=indent_level))
    with open(Path("{}/resource/{}/recipes.json".format(PROJECT_DIR, version)), mode="w+") as recipes_file:
        recipes_file.write(json.dumps(json.loads(jsonpickle.encode(recipes)), indent=indent_level))


def load_json_files(version):
    start_nanos = time.time_ns()
    with open(Path("{}/resource/{}/machines.json".format(PROJECT_DIR, version)), mode="r") as machines_file:
        machines = jsonpickle.decode(machines_file.read())
    with open(Path("{}/resource/{}/modules.json".format(PROJECT_DIR, version)), mode="r") as modules_file:
        modules = jsonpickle.decode(modules_file.read())
    with open(Path("{}/resource/{}/recipes.json".format(PROJECT_DIR, version)), mode="r") as recipes_file:
        recipes = jsonpickle.decode(recipes_file.read())
    load_nanos = time.time_ns()
    print("Loading took {} nanoseconds".format(load_nanos - start_nanos))
    return (machines, modules, recipes)


def main():
    # TODO: Replace this test data with an actual interface + arguments
    version = "0.17"
    item_list = [("science", 1200)]
    prod_mod_level = 3
    seconds = 60
    # write_json_data(version)

    # Load JSON files
    json_files = load_json_files(version)
    machines = json_files[0]
    modules = json_files[1]
    recipes = json_files[2]

    # Calculate crafting requirements
    start_nanos = time.time_ns()
    prod_modifier = get_prod_modifier(modules, prod_mod_level)
    totals = get_totals(item_list, machines, recipes, prod_modifier)
    handle_oil_processing(totals, machines, recipes, prod_modifier)
    print_totals(totals, recipes, seconds)
    calc_nanos = time.time_ns()
    print("Calculating took {} nanoseconds".format(calc_nanos - start_nanos))


main()
